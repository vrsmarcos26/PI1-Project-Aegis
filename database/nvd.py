"""
Este script consome a API oficial da NVD (National Vulnerability Database) 
para obter informaÃ§Ãµes sobre vulnerabilidades conhecidas (CVEs).

ğŸ“Œ O que Ã© a NVD?
A NVD Ã© mantida pelo NIST (EUA) e centraliza dados sobre falhas de seguranÃ§a 
reportadas publicamente. Cada vulnerabilidade Ã© identificada por um CVE ID 
(ex: CVE-2024-12345) e descrita com informaÃ§Ãµes tÃ©cnicas, impacto e referÃªncias.

ğŸ“Œ Como a API funciona?
- Base URL: https://services.nvd.nist.gov/rest/json/cves/2.0
- Retorna dados em formato JSON estruturado.
- Principais parÃ¢metros de consulta:
    â€¢ keywordSearch  â†’ busca por palavra-chave (ex: "wordpress", "apache", "php")
    â€¢ cvssV3Severity â†’ filtra vulnerabilidades por severidade (LOW, MEDIUM, HIGH, CRITICAL)
    â€¢ pubStartDate / pubEndDate â†’ busca por intervalo de datas (formato: YYYY-MM-DDTHH:MM:SS:000 UTC-00:00)
    â€¢ cveId â†’ consulta direta por um CVE especÃ­fico
    â€¢ resultsPerPage â†’ controla o nÃºmero de resultados por pÃ¡gina
    â€¢ startIndex â†’ paginaÃ§Ã£o para grandes volumes de dados

ğŸ“Œ Estrutura resumida da resposta JSON:
{
  "resultsPerPage": 10,
  "totalResults": 123,
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-12345",
        "descriptions": [{"lang": "en", "value": "DescriÃ§Ã£o da falha..."}],
        "metrics": {
          "cvssMetricV31": [
            {"cvssData": {"baseSeverity": "HIGH", "baseScore": 7.5}}
          ]
        },
        "references": [{"url": "https://example.com/patch"}]
      }
    }
  ]
}

ğŸ“Œ O que este cÃ³digo faz:
1. Conecta Ã  API NVD e faz uma consulta por palavra-chave e severidade.
2. Extrai os principais campos de cada CVE:
   - CVE ID
   - Severidade e Score CVSS
   - DescriÃ§Ã£o da vulnerabilidade
   - URL de referÃªncia
3. Organiza os dados em um DataFrame (tabela) usando Pandas.
4. Salva os resultados em um arquivo JSON local ("vulnerabilidades.json").

"""

"""
Script aprimorado para consumir a API da NVD (National Vulnerability Database)
e extrair informaÃ§Ãµes sobre vulnerabilidades conhecidas (CVEs).

Funcionalidades:
- Busca por palavra-chave e severidade
- Filtro por ano
- Retry automÃ¡tico em caso de falha na requisiÃ§Ã£o
- PaginaÃ§Ã£o automÃ¡tica para capturar todos os resultados
- Exporta dados para JSON e CSV
- Gera relatÃ³rio resumido por severidade

ğŸ“Œ Exemplo de uso:
    get_cves(keyword="Linux", severity="CRITICAL", year=2025)
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
import time

NVD_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

def request_with_retry(url, params, max_retries=3, delay=2):
    """RequisiÃ§Ã£o HTTP com retry"""
    for attempt in range(max_retries):
        r = requests.get(url, params=params)
        if r.status_code == 200:
            return r.json()
        else:
            print(f"Tentativa {attempt+1} falhou: {r.status_code}")
            time.sleep(delay)
    print("Falha apÃ³s vÃ¡rias tentativas.")
    return None

def generate_date_ranges(year, max_days=120):
    """Divide o ano em blocos de no mÃ¡ximo 120 dias"""
    start = datetime(year, 1, 1)
    end = datetime(year, 12, 31)
    ranges = []
    current_start = start
    while current_start <= end:
        current_end = min(current_start + timedelta(days=max_days-1), end)
        ranges.append((current_start, current_end))
        current_start = current_end + timedelta(days=1)
    return ranges

def get_cves(keyword="", severity="", year=None, results_per_page=2000):
    all_vulns = []

    date_ranges = generate_date_ranges(year) if year else [(None, None)]

    for start_date, end_date in date_ranges:
        start_index = 0
        while True:
            params = {
                "keywordSearch": keyword,
                "cvssV3Severity": severity,
                "resultsPerPage": results_per_page,
                "startIndex": start_index
            }
            if start_date:
                params["pubStartDate"] = start_date.strftime("%Y-%m-%dT%H:%M:%S.000Z")
            if end_date:
                params["pubEndDate"] = end_date.strftime("%Y-%m-%dT%H:%M:%S.999Z")

            data = request_with_retry(NVD_URL, params)
            if not data:
                break

            items = data.get("vulnerabilities", [])
            if not items:
                break

            for item in items:
                cve = item["cve"]
                cve_id = cve.get("id", "N/A")
                descricao = cve.get("descriptions", [{"value":"N/A"}])[0]["value"]

                metrics = cve.get("metrics", {}).get("cvssMetricV31") or cve.get("metrics", {}).get("cvssMetricV30") or []
                if metrics:
                    severidade_cve = metrics[0]["cvssData"].get("baseSeverity", "N/A")
                    score = metrics[0]["cvssData"].get("baseScore", "N/A")
                else:
                    severidade_cve, score = "N/A", "N/A"

                url_ref = cve.get("references", [{"url":"N/A"}])[0]["url"]

                all_vulns.append([cve_id, severidade_cve, score, descricao, url_ref])

            start_index += len(items)
            total_results = data.get("totalResults", 0)
            if start_index >= total_results:
                break

            time.sleep(0.6)  # para evitar rate limit

    df = pd.DataFrame(all_vulns, columns=["CVE_ID", "Severidade", "Score", "DescriÃ§Ã£o", "ReferÃªncia"])

    if year:
        df.to_json(f"vulnerabilidades_{year}.json", orient="records", indent=4, force_ascii=False)
        df.to_csv(f"vulnerabilidades_{year}.csv", index=False)
    else:
        df.to_json(f"vulnerabilidades.json", orient="records", indent=4, force_ascii=False)
        df.to_csv(f"vulnerabilidades.csv", index=False)

    resumo = df.groupby("Severidade")["CVE_ID"].count()
    print("âœ… Dados salvos com sucesso")
    print("\nğŸ“Š Resumo de CVEs por Severidade:")
    print(resumo)

    return df

# Exemplo de execuÃ§Ã£o
if __name__ == "__main__":
    df_criticos = get_cves(keyword="Linux", severity="CRITICAL", year=2025, results_per_page=20)
